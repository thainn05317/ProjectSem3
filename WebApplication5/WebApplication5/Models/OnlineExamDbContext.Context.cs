//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class OnlineAptitudeTestEntities : DbContext
{
    public OnlineAptitudeTestEntities()
        : base("name=OnlineAptitudeTestEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<Answer> Answers { get; set; }
    public virtual DbSet<Candidate> Candidates { get; set; }
    public virtual DbSet<Category> Categories { get; set; }
    public virtual DbSet<Manager> Managers { get; set; }
    public virtual DbSet<Question> Questions { get; set; }

    public virtual ObjectResult<Question> GetQuestion(Nullable<int> categoryId, Nullable<int> mark)
    {
        var categoryIdParameter = categoryId.HasValue ?
            new ObjectParameter("CategoryId", categoryId) :
            new ObjectParameter("CategoryId", typeof(int));

        var markParameter = mark.HasValue ?
            new ObjectParameter("Mark", mark) :
            new ObjectParameter("Mark", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Question>("GetQuestion", categoryIdParameter, markParameter);
    }

    public virtual ObjectResult<Question> GetQuestion(Nullable<int> categoryId, Nullable<int> mark, MergeOption mergeOption)
    {
        var categoryIdParameter = categoryId.HasValue ?
            new ObjectParameter("CategoryId", categoryId) :
            new ObjectParameter("CategoryId", typeof(int));

        var markParameter = mark.HasValue ?
            new ObjectParameter("Mark", mark) :
            new ObjectParameter("Mark", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Question>("GetQuestion", mergeOption, categoryIdParameter, markParameter);
    }
}
